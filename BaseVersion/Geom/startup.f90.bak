subroutine extension
      use Global
      implicit none
!      include 'mpif.h'
      integer  i,j,k, iblock, iL,jL,kL,is,js,ks, &
          &     istart, jstart, kstart,  iend, jend, kend,  &
          &     istartT,jstartT,kstartT, iendT,jendT,kendT, &
          &     TargetProc,NTargetB,NTargetConn, &
          &     iadd,jadd,kadd, Transform(3,3), NT(3), icon, &
          &     ibuf,jbuf,kbuf, iLen,jLen,kLen, &
          &     tag,NumGrid,ierr, Offset(3), &
          &     ibc,MinMax, PerType,BCType
      real*8 :: dcita,sint,cost,ttx,tty
      real*8,allocatable :: bufs(:,:,:,:),bufR(:,:,:,:)
      type(ConnectivityStruct),pointer :: AConnect,tempCon
      integer ::  sendq
      integer::revMatrix(3),TransformL(3),TransformT(3),lcross,IIadd,JJadd,KKadd
      
      !! init MarkBC
!      do iblock=1, NBlock
!           call pointerSet(iblock)
!        
!           allocate(thisBlock%MarkBCI(2,jq,kq))  !! imin,imax face BC mark
!           allocate(thisBlock%MarkBCJ(2,iq,kq))
!           allocate(thisBlock%MarkBCK(2,iq,jq))
!           thisBlock%MarkBCI(:,:,:)= 1  !! init it to Non-BC
!           thisBlock%MarkBCJ(:,:,:)= 1
!           thisBlock%MarkBCK(:,:,:)= 1
!           do icon=1, ThisBlock%NConnect
!              tempCon=> ThisBlock%AConnectivity(icon)
!              if( tempCon%BCType/=1 )cycle  ! BCType=1 for Wall BC
!                  istart= tempCon%PointStart(1)
!                  jstart= tempCon%PointStart(2)
!                  kstart= tempCon%PointStart(3)
!                  iend  = tempCon%PointEnd(1)
!                  jend  = tempCon%PointEnd(2)
!                  kend  = tempCon%PointEnd(3)
!                 if(tempCon%IJKDirect==1)then
!                    minmax=1
!                   if(istart==im) minmax=2
!                   thisBlock%MarkBCI(minmax,jstart:jend,kstart:kend)=0
!                elseif(tempCon%IJKDirect==2)then
!                    minmax=1
!                if(jstart==jm) minmax=2
!                thisBlock%MarkBCJ(minmax,istart:iend,kstart:kend)=0
!                elseif(tempCon%IJKDirect==3)then
!                   minmax=1
!                  if(kstart==km) minmax=2
!                  thisBlock%MarkBCK(minmax,istart:iend,jstart:jend)=0
!               endif
!         enddo
!      enddo
      
      
      !! set ghost cell grid
!      do iblock=1, NBlock
!      call pointerSet(iblock)
    do iblock=1,Max_Block
        call Global_SetPointers(iblock)
        NI=ThisBlock%NI
        NJ=ThisBlock%NJ
        NK=ThisBlock%NK

      do k=1,NK  !! init the ghost cell grid
      do j=1,NJ
        i=1
        xx(i-1,j,k)= 2*xx(i,j,k)-xx(i+1,j,k)
        yy(i-1,j,k)= 2*yy(i,j,k)-yy(i+1,j,k)
        zz(i-1,j,k)= 2*zz(i,j,k)-zz(i+1,j,k)
        i=NI
        xx(i+1,j,k)= 2*xx(i,j,k)-xx(i-1,j,k)
        yy(i+1,j,k)= 2*yy(i,j,k)-yy(i-1,j,k)
        zz(i+1,j,k)= 2*zz(i,j,k)-zz(i-1,j,k)
      enddo
      enddo
      do k=1,NK
      do i=0,NI+1
        j=1
        xx(i,j-1,k)= 2*xx(i,j,k)-xx(i,j+1,k)
        yy(i,j-1,k)= 2*yy(i,j,k)-yy(i,j+1,k)
        zz(i,j-1,k)= 2*zz(i,j,k)-zz(i,j+1,k)
        j=NJ
        xx(i,j+1,k)= 2*xz(i,j,k)-xx(i,j-1,k)
        yy(i,j+1,k)= 2*yy(i,j,k)-yy(i,j-1,k)
        zz(i,j+1,k)= 2*zz(i,j,k)-zz(i,j-1,k)
      enddo
      enddo
      do j=0,NJ+1
      do i=0,NI+1
        k=1
        xx(i,j,k-1)= 2*xx(i,j,k)-xx(i,j,k+1)
        yy(i,j,k-1)= 2*yy(i,j,k)-yy(i,j,k+1)
        zz(i,j,k-1)= 2*zz(i,j,k)-zz(i,j,k+1)
        k=NK
        xx(i,j,k+1)= 2*xx(i,j,k)-xx(i,j,k-1)
        yy(i,j,k+1)= 2*yy(i,j,k)-yy(i,j,k-1)
        zz(i,j,k+1)= 2*zz(i,j,k)-zz(i,j,k-1)
      enddo
      enddo

      enddo
      !! -----  send grid at ghostcell
      do iblock=1, NBlock
      call pointerSet(iblock)

      do icon=1, ABlock(iblock)%NConnect
         AConnect=> ABlock(iblock)%AConnectivity(icon)
         BCType=AConnect%BCType

        if(BCType==9)then   !for Connectivity 
         NTargetB   = Aconnect%TargetBlock
         NTargetConn= Aconnect%TargetConn
        istart= AConnect%PointStart(1)
        jstart= AConnect%PointStart(2)
        kstart= AConnect%PointStart(3)
        iend  = AConnect%PointEnd(1)
        jend  = AConnect%PointEnd(2)
        kend  = AConnect%PointEnd(3)
        if(istart/=iend) iend=iend+1  !!?? side range to point range
        if(jstart/=jend) jend=jend+1
        if(kstart/=kend) kend=kend+1
        iadd  = AConnect%IJKadd(1)
        jadd  = AConnect%IJKadd(2)
        kadd  = AConnect%IJKadd(3)
        
!         write(*,*)"ijk",istart,iend,jstart,jend,kstart,kend
        allocate(bufs(3,iend-istart+1,jend-jstart+1,kend-kstart+1))
        do k=kstart, kend
        do j=jstart, jend
        do i=istart, iend
          is=i+iadd
          js=j+jadd
          ks=k+kadd
          ibuf=i-istart+1
          jbuf=j-jstart+1
          kbuf=k-kstart+1
          bufs(1,ibuf,jbuf,kbuf)= x(is,js,ks)
          bufs(2,ibuf,jbuf,kbuf)= y(is,js,ks)
          bufs(3,ibuf,jbuf,kbuf)= z(is,js,ks)
        enddo
        enddo
        enddo

        TargetProc= PBlock(NTargetB)-1  !! -1 mean actual proc index
        tag= NTargetB*100+ NTargetConn  !! so NTargetConn<100
        numGrid= 3*(iend-istart+1)*(jend-jstart+1)*(kend-kstart+1)
 !        write(*,*) 'Extsend',myProc,'tarProc,TarB,TarCon:',targetProc, NTargetB,NTargetConn,tag,numgrid
        call MPI_IBSend(bufs,numGrid,MPI_DOUBLE_PRECISION,TargetProc,tag, &
                      MPI_COMM_WORLD,sendq, ierr)
        
        call MPI_Wait(sendq,status,ierr)

        deallocate(bufs)
      endif
     enddo
     enddo

     !! receive ghost cell grids, 
     do iblock=1, NBlock
      call pointerSet(iblock)

     do icon=1, ABlock(iblock)%NConnect
        AConnect=> ABlock(iblock)%AConnectivity(icon)
        BCType=AConnect%BCType

     if(BCType==9)then      !for Connectivity
        NTargetB= Aconnect%TargetBlock

        istart= AConnect%PointStart(1)
        jstart= AConnect%PointStart(2)
        kstart= AConnect%PointStart(3)
        iend  = AConnect%PointEnd(1)
        jend  = AConnect%PointEnd(2)
        kend  = AConnect%PointEnd(3)
        if(istart/=iend) iend=iend+1  !!?? side range to point range
        if(jstart/=jend) jend=jend+1
        if(kstart/=kend) kend=kend+1
        iadd  = AConnect%IJKadd(1)
        jadd  = AConnect%IJKadd(2)
        kadd  = AConnect%IJKadd(3)
        OffSet(1:3)= AConnect%Offset(1:3)
        
        PerType= AConnect%PerType
!        dcita  = AConnect%rotateAngle(3)
        dcita  = AConnect%rotateAngle(1)
        sint   = sin(dcita)
        cost   = cos(dcita)
        
!         write(*,*) MyProc,'s,e',istart,jstart,kstart,iend,jend,kend
!         write(*,*) Myproc,'offset', (offset(i),i=1,3)
!         pause
        
        TransformT=AConnect%TransformT
        iLen= AConnect%TPLijk(1)+1-TransformT(1)
        jLen= AConnect%TPLijk(2)+1-TransformT(2)
        kLen= AConnect%TPLijk(3)+1-TransformT(3)
        allocate(bufR(3,iLen,jLen,kLen))
        targetProc= PBlock(NTargetB)-1  !! -1 mean actual proc index
!        tag= (iblock+NblockStart-1)*100+ icon
        tag=ABlock(iblock)%NBlockGlobal*100+icon
        numGrid= 3*iLen*jLen*kLen
        ! write(*,*) 'rec',myProc,'tarProc,TarB,TarCon:',targetProc, iblock,icon,tag,numgrid
        call MPI_Recv(bufr,numGrid,MPI_DOUBLE_PRECISION,targetProc,tag, &
                 MPI_COMM_WORLD,status,ierr)

!******************added by ydd******************
        revMatrix=AConnect%revMatrix
        TransformL=AConnect%Transform
        TransformT=AConnect%TransformT
        lcross=AConnect%lcross
        IIadd=Iend-Istart+2
        JJadd=Jend-Jstart+2
        KKadd=Kend-Kstart+2
        do k=kstart, kend
        do j=jstart, jend
        do i=istart, iend
          iL= i-istart+1
          jL= j-jstart+1
          kL= k-kstart+1
            iL=revMatrix(1)*IIadd+(1-2*revMatrix(1))*iL
            jL=revMatrix(2)*JJadd+(1-2*revMatrix(2))*jL
            kL=revMatrix(3)*KKadd+(1-2*revMatrix(3))*kL
            call IJKStartEnd(iL,jL,kL,Is,Js,Ks,TransformL,TransformT,lcross)
            x(i-iadd,j-jadd,k-kadd)=bufr(1,is,js,ks)
            ttx=bufr(2,is,js,ks)
            tty=bufr(3,is,js,ks)
            y(i-iadd,j-jadd,k-kadd)=ttx
            z(i-iadd,j-jadd,k-kadd)=tty
            if(PerType.ne.0)then
                y(i-iadd,j-jadd,k-kadd)=ttx*cost+tty*sint
                z(i-iadd,j-jadd,k-kadd)=-ttx*sint+tty*cost
            endif
        enddo
        enddo
        enddo
!********************************************
!        do k=kstart, kend
!        do j=jstart, jend
!        do i=istart, iend
!          iL= i-istart
!          jL= j-jstart
!          kL= k-kstart
!          Transform(:,:)= 0
!          NT(:)= AConnect%Transform(:)
!          Transform(1,abs(NT(1)))= sign(1, NT(1))
!          Transform(2,abs(NT(2)))= sign(1, NT(2))
!          Transform(3,abs(NT(3)))= sign(1, NT(3))

!          is= Transform(1,1)*iL+ Transform(2,1)*jL+ Transform(3,1)*kL+ Offset(1)+1
!          js= Transform(1,2)*iL+ Transform(2,2)*jL+ Transform(3,2)*kL+ Offset(2)+1
!          ks= Transform(1,3)*iL+ Transform(2,3)*jL+ Transform(3,3)*kL+ Offset(3)+1
!		  write(*,*) 'is,js,ks',MyProc,is,js,ks,bufr(1,is,js,ks),bufr(2,is,js,ks),bufr(3,is,js,ks)
      
!          z(i-iadd,j-jadd,k-kadd)= bufr(3,is,js,ks)
!          ttx= bufr(1,is,js,ks)
!          tty= bufr(2,is,js,ks)
!          if( PerType==3 )then
!            x(i-iadd,j-jadd,k-kadd)= ttx*cost+ tty*sint
!            y(i-iadd,j-jadd,k-kadd)=-ttx*sint+ tty*cost
!          else
!            x(i-iadd,j-jadd,k-kadd)= ttx
!            y(i-iadd,j-jadd,k-kadd)= tty
!          endif
!        enddo
!        enddo
!        enddo

        deallocate(bufR)
      endif
      enddo


        !! output the block grid
        filename= trim("extGrid"//trim(filename2)//".dat")
        open(unit=120,file=filename )
        write(120,*) 'variables="x","y","z"'
        write(120,*) 'zone i=',NI+1, ' j=',NJ+2,' k=',NK+2,' f=point '
        do k=0,NK+1
        do j=0,NJ+1
        do i=0,NI+1
          write(120,*) xx(i,j,k), yy(i,j,k),zz(i,j,k)
        enddo
        enddo
        enddo
        close(120)

      enddo

      return
end subroutine   



