subroutine BC_Outlet(ibc,sweep)
    USE Global
    IMPLICIT NONE
    integer:: Ibgn,Iend,Jbgn,Jend,Kbgn,Kend,i,j,k,l
    integer:: sweep,Kindsub_BC
    integer::iBC,is,js,ks,il,jl,kl,iadd,jadd,kadd,iadd1,jadd1,kadd1,iadd2,jadd2,kadd2,&
        &   Eiadd,Ejadd,Ekadd,Eiadd1,Ejadd1,Ekadd1,Eiadd2,Ejadd2,Ekadd2
    type(ConnectivityStruct),pointer :: Aconnect 
    real::rcs1,rcs2,RoVr2,den_ratio,cosr,sinr,Vabs,Wabs,den

        AConnect=>ThisBlock%AConnectivity(ibc)
        Ibgn=AConnect%PointStart(1)
        Jbgn=AConnect%PointStart(2)
        Kbgn=AConnect%PointStart(3)
        Iend=AConnect%PointEnd(1)
        Jend=AConnect%PointEnd(2)
        Kend=AConnect%PointEnd(3)
        iadd=AConnect%CIJKAdd(1)
        jadd=AConnect%CIJKAdd(2)
        kadd=AConnect%CIJKAdd(3)
        iadd1=AConnect%CIJKAdd1(1)
        jadd1=AConnect%CIJKAdd1(2)
        kadd1=AConnect%CIJKAdd1(3)
        iadd2=AConnect%CIJKAdd2(1)
        jadd2=AConnect%CIJKAdd2(2)
        kadd2=AConnect%CIJKAdd2(3)
        Eiadd=AConnect%CEIJKAdd(1)
        Ejadd=AConnect%CEIJKAdd(2)
        Ekadd=AConnect%CEIJKAdd(3)
        Eiadd1=AConnect%CEIJKAdd1(1)
        Ejadd1=AConnect%CEIJKAdd1(2)
        Ekadd1=AConnect%CEIJKAdd1(3)
        Eiadd2=AConnect%CEIJKAdd2(1)
        Ejadd2=AConnect%CEIJKAdd2(2)
        Ekadd2=AConnect%CEIJKAdd2(3)

    if(sweep==0)then
        do K=Kbgn,Kend
        do J=Jbgn,Jend
        do I=Ibgn,Iend
            is=i+iadd;  js=j+jadd;  ks=k+kadd
            il=i+Eiadd; jl=j+Ejadd; kl=k+Ekadd
            do L=1,18
                DqDxyz(L,il,jl,kl)=DqDxyz(L,is,js,ks)
            enddo
        enddo
        enddo
        enddo
    elseif(sweep==-1)then
        do k=Kbgn,Kend
        do j=Jbgn,Jend
        do i=Ibgn,Iend
            is=i+iadd;  js=j+jadd;  ks=k+kadd
            il=i+Eiadd; jl=j+Ejadd; kl=k+Ekadd
            
            T(il,jl,kl)=T(is,js,ks)
            if(j==Jbgn)then
                PP(il,jl,kl)=Pouthub
                rcs1=0.0
                rcs2=0.0
                RoVr2=0.0
            else    
                rcs1=rad(il,jl,kl)
                rcs2=rad(il,jl-1,kl)
                sinr=sin(thtc(il,jl-1,kl))
                cosr=cos(thtc(il,jl-1,kl))
                den=V(1,il,jl-1,kl)
                RoVr2=(V(4,il,jl-1,kl)/den*cosr-sinr*V(3,il,jl-1,kl)/den+omega(1)*rcs2)**2.0
                PP(il,jl,kl)=PP(il,jl-1,kl)+abs((rcs1-rcs2)*den*RoVr2)/(rcs2+tiny)
            endif
                V(1,il,jl,kl)=PP(il,jl,kl)/T(il,jl,kl)*RXM2
                den_ratio=V(1,il,jl,kl)/V(1,is,js,js)
                V(2,il,jl,kl)=V(2,is,js,ks)*den_ratio
                V(3,il,jl,kl)=V(3,is,js,ks)*den_ratio
                V(4,il,jl,kl)=V(4,is,js,ks)*den_ratio
                
           write(*,*)"Outlet",il,jl,kl,PP(il,jl,kl) ,V(3:4,il,jl-1,kl)
           write(*,*),"omrga",omega(1),rcs2

                is=i+Eiadd;  js=j+Ejadd;  ks=k+Ekadd
                il=i+Eiadd1; jl=j+Ejadd1; kl=k+Ekadd1
                V(1:4,il,jl,kl)=V(1:4,is,js,ks)
                PP(il,jl,kl)=PP(is,js,ks)
                T(il,jl,kl)=T(is,js,ks)
              
                il=i+Eiadd2; jl=j+Ejadd2; kl=k+Ekadd2
                V(1:4,il,jl,kl)=V(1:4,is,js,ks)
                PP(il,jl,kl)=PP(is,js,ks)
                T(il,jl,kl)=T(is,js,ks)
                if(IF_turb)then
                    is=i+iadd;  js=j+jadd;  ks=k+kadd
                    il=i+Eiadd; jl=j+Ejadd; kl=k+Ekadd
                    V(6:7,il,jl,kl)=V(6:7,is,js,ks)
                    Rmiu(il,jl,kl)=Rmiu(is,js,ks)

                    is=i+Eiadd;  js=j+Ejadd;  ks=k+Ekadd
                    il=i+Eiadd1; jl=j+Ejadd1; kl=k+Ekadd1
                    V(6:7,il,jl,kl)=V(6:7,is,js,ks)
                    Rmiu(il,jl,kl)=Rmiu(is,js,ks)

                    il=i+Eiadd2; jl=j+Ejadd2; kl=k+Ekadd2
                    V(6:7,il,jl,kl)=V(6:7,is,js,ks)
                    Rmiu(il,jl,kl)=Rmiu(is,js,ks)

                endif
        enddo
        enddo
        enddo 
    endif
    
END SUBROUTINE BC_Outlet


