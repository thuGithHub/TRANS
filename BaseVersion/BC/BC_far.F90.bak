SUBROUTINE BC_far(Ibgn,Iend,Jbgn,Jend,Kbgn,Kend,  sweep,IJK,MinorMax, Out_n)
    USE Global
    IMPLICIT NONE
    
    INTEGER:: Ibgn,Iend,Jbgn,Jend,Kbgn,Kend 
    INTEGER:: sweep
    INTEGER:: IJK, MinorMax
    INTEGER:: I,J,K,L
    REAL:: Out_n, VIO
    
    INTEGER:: I_L0,I_L1,I_L2
    INTEGER:: J_L0,J_L1,J_L2
    INTEGER:: K_L0,K_L1,K_L2
    INTEGER:: I_R0,I_R1,I_R2
    INTEGER:: J_R0,J_R1,J_R2
    INTEGER:: K_R0,K_R1,K_R2
    INTEGER:: I_VL0,J_VL0,K_VL0,   I_VR0,J_VR0,K_VR0,   I_VR1,J_VR1,K_VR1
    INTEGER:: II

    INTEGER:: Ifar,Jfar,Kfar
    REAL::Sout1,Sout2,Sout3
    
    REAL:: Den,Vxi,Vyi,Vzi,P2
    REAL:: Dnx,Dny,Dnz
    REAL:: PP0,Den0,Vx0,Vy0,Vz0
    REAL:: dir
    real::TT0,TT,RmiuFar

        if(sweep==-2)then
          DO K=Kbgn,Kend
          DO J=Jbgn,Jend
          DO I=Ibgn,Iend

        CALL VBC_SETlrnum(I_L0,J_L0,K_L0,I_R0,J_R0,K_R0,I_L1,J_L1,K_L1,I_R1,J_R1,K_R1,I_L2,J_L2,K_L2,I_R2,J_R2,K_R2, &
        &         I_VL0,J_VL0,K_VL0,   I_VR0,J_VR0,K_VR0,I_VR1,J_VR1,K_VR1,I,J,K,IJK,MinorMax)
        
               Vol(I_l0,J_l0,K_l0)=Vol(I_r0,J_r0,K_r0) 
               Dst(I_l0,J_l0,K_l0)=Dst(I_r0,J_r0,K_r0) 
               Alagm(IJK,I_l0,J_l0,K_l0)=Alagm(IJK,I_r0,J_r0,K_r0) 
               Vol(I_l1,J_l1,K_l1)=Vol(I_r0,J_r0,K_r0) 
               Dst(I_l1,J_l1,K_l1)=Dst(I_r0,J_r0,K_r0) 
               Alagm(IJK,I_l1,J_l1,K_l1)=Alagm(IJK,I_r0,J_r0,K_r0)
 
                rad(I_l0,J_l0,K_l0)=2.0*rad(I_r0,J_r0,K_r0)-rad(I_r1,J_r1,K_r1)
                rad(I_l1,J_l1,K_l1)=2.0*rad(I_l0,J_l0,K_l0)-rad(I_r0,J_r0,K_r0)
                rad(I_l2,J_l2,K_l2)=2.0*rad(I_l1,J_l1,K_l1)-rad(I_l0,J_l0,K_l0)
                thtc(I_l0,J_l0,K_l0)=2.0*thtc(I_r0,J_r0,K_r0)-thtc(I_r1,J_r1,K_r1)
                thtc(I_l1,J_l1,K_l1)=2.0*thtc(I_l0,J_l0,K_l0)-thtc(I_r0,J_r0,K_r0)
                thtc(I_l2,J_l2,K_l2)=2.0*thtc(I_l1,J_l1,K_l1)-thtc(I_l0,J_l0,K_l0)
                do L=1,3        
                    SD(IJK,L,I_VL0,J_VL0,K_VL0)=2.0*SD(IJK,L,I_VR0,J_VR0,K_VR0)-SD(IJK,L,I_VR1,J_VR1,K_VR1)
                enddo

        enddo
        enddo
        enddo
      elseif(sweep==-1)then
        DO K=Kbgn,Kend
        DO J=Jbgn,Jend
        DO I=Ibgn,Iend

            CALL VBC_SETlrnum(I_L0,J_L0,K_L0,I_R0,J_R0,K_R0,I_L1,J_L1,K_L1,I_R1,J_R1,K_R1,I_L2,J_L2,K_L2,I_R2,J_R2,K_R2,    &
            &            I_VL0,J_VL0,K_VL0,   I_VR0,J_VR0,K_VR0,   I_VR1,J_VR1,K_VR1,   &
            &            I,J,K,  IJK,MinorMax)
                Sout1 = SD(IJK,1,I_VR0,J_VR0,K_VR0)/(Grad(IJK,I_VR0,J_VR0,K_VR0))
                Sout2 = SD(IJK,2,I_VR0,J_VR0,K_VR0)/Grad(IJK,I_VR0,J_VR0,K_VR0)
                Sout3 = SD(IJK,3,I_VR0,J_VR0,K_VR0)/Grad(IJK,I_VR0,J_VR0,K_VR0)

                Den=V(1, I_R0 , J_R0 , K_R0)
                Vxi=V(2, I_R0 , J_R0 , K_R0) / Den
                Vyi=V(3, I_R0 , J_R0 , K_R0) / Den
                Vzi=V(4, I_R0 , J_R0 , K_R0) / Den
                P2 = PP( I_R0 , J_R0 , K_R0)
!		 out_n: 1 or -1, for min/max direction
!		 
                Dnx= Sout1 * Out_n
                Dny= Sout2 * Out_n
                Dnz= Sout3 * Out_n

                IF (IF_PRECONDITION) THEN
                    CALL BC_FARBONDP(XM,P2,Den,Vxi,Vyi,Vzi,DNx,DNy,DNz,VxF,VyF,VzF,PP0,Den0,VX0,VY0,VZ0,TT0,dir)
                ELSE
                    CALL BC_FARBOND(XM,P2,Den,Vxi,Vyi,Vzi,DNx,DNy,DNz, VxF,VyF,VzF,PP0,Den0,VX0,VY0,VZ0,dir)
                    TT0 = RXM2*PP0/Den0
                ENDIF
                V(1,I_l0,J_l0,K_l0 ) = Den0   ! gas state function
                V(2,I_l0,J_l0,K_l0 ) = Vx0*V(1,I_l0,J_l0,K_l0 )   
                V(3,I_l0,J_l0,K_l0 ) = Vy0*V(1,I_l0,J_l0,K_l0 )
                V(4,I_l0,J_l0,K_l0 ) = Vz0*V(1,I_l0,J_l0,K_l0 )
                PP(I_l0,J_l0,K_l0)   = PP0
                T (I_l0,J_l0,K_l0)   = TT0
       
                V(1,I_l1,J_l1,K_l1 ) =  2.0_8*V(1,I_l0,J_l0,K_l0 )- V(1,I_r0,J_r0,K_r0 )
                V(2,I_l1,J_l1,K_l1 ) =  2.0_8*V(2,I_l0,J_l0,K_l0 )- V(2,I_r0,J_r0,K_r0 )
                V(3,I_l1,J_l1,K_l1 ) =  2.0_8*V(3,I_l0,J_l0,K_l0 )- V(3,I_r0,J_r0,K_r0 )
                V(4,I_l1,J_l1,K_l1 ) =  2.0_8*V(4,I_l0,J_l0,K_l0 )- V(4,I_r0,J_r0,K_r0 )
                PP(I_l1,J_l1,K_l1)   =  2.0_8*PP(I_l0,J_l0,K_l0)  - PP(I_r0,J_r0,K_r0)  
                T (I_l1,J_l1,K_l1)   =  2.0_8*T (I_l0,J_l0,K_l0)  - T (I_r0,J_r0,K_r0)

                V(1,I_l2,J_l2,K_l2 ) = 2.0_8*V(1,I_l1,J_l1,K_l1 )- V(1,I_l0,J_l0,K_l0 )
                V(2,I_l2,J_l2,K_l2 ) = 2.0_8*V(2,I_l1,J_l1,K_l1 )- V(2,I_l0,J_l0,K_l0 )
                V(3,I_l2,J_l2,K_l2 ) = 2.0_8*V(3,I_l1,J_l1,K_l1 )- V(3,I_l0,J_l0,K_l0 )
                V(4,I_l2,J_l2,K_l2 ) = 2.0_8*V(4,I_l1,J_l1,K_l1 )- V(4,I_l0,J_l0,K_l0 )
                PP(I_l2,J_l2,K_l2)   = 2.0_8*PP(I_l1,J_l1,K_l1)  - PP(I_l0,J_l0,K_l0)  
                T (I_l2,J_l2,K_l2)   = 2.0_8*T (I_l1,J_l1,K_l1)  - T (I_l0,J_l0,K_l0)

                if(IF_turb)then
                    if(dir>0.0)then
                        V(6,I_l0,J_l0,K_l0)=V(6,I_r0,J_r0,K_r0)
                        V(7,I_l0,J_l0,K_l0)=V(7,I_r0,J_r0,K_r0)
                        Rmiu(I_l0,J_l0,K_l0)=Rmiu(I_r0,J_r0,K_r0)
                        V(6,I_l1,J_l1,K_l1)=V(6,I_r0,J_r0,K_r0)
                        V(7,I_l1,J_l1,K_l1)=V(7,I_r0,J_r0,K_r0)
                        Rmiu(I_l1,J_l1,K_l1)=Rmiu(I_r0,J_r0,K_r0)
                    else
                        TT=T(I_l0,J_l0,K_l0)                    !by ydd 20151209
                        RmiuFar=(1.0+Csthlnd)/(TT*Csth1+Csthlnd)*(Csth1*TT)**1.5
                        Rmiu(I_l0,J_l0,K_l0)=VisRatio*RmiuFar
                        V(6,I_l0,J_l0,K_l0)=1.5*FSTI*FSTI*V(1,I_l0,J_l0,K_l0)    !Rkf
                        V(7,I_l0,J_l0,K_l0)=V(6,I_l0,J_l0,K_l0)/(Rmiu(I_l0,J_l0,K_l0)+tiny)*V(1,I_l0,J_l0,K_l0)
                        V(6,I_l1,J_l1,K_l1)=V(6,I_l0,J_l0,K_l0)
                        V(7,I_l1,J_l1,K_l1)=V(7,I_l0,J_l0,K_l0)
                        Rmiu(I_l1,J_l1,K_l1)=Rmiu(I_l0,J_l0,K_l0)
                        
                        !V(6,I_l0,J_l0,K_l0)=Rkf
                        !V(7,I_l0,J_l0,K_l0)=Rof
                        !Rmiu(I_l0,J_l0,K_l0)=Rmiuf
                        !V(6,I_l1,J_l1,K_l1)=Rkf
                        !V(7,I_l1,J_l1,K_l1)=Rof
                        !Rmiu(I_l1,J_l1,K_l1)=Rmiuf
                    endif
                endif
            enddo
            enddo
            enddo
        elseif(sweep==0)then
            do K=Kbgn,Kend
            do J=Jbgn,Jend
            do I=Ibgn,Iend
                CALL VBC_SETlrnum(I_L0,J_L0,K_L0,I_R0,J_R0,K_R0,I_L1,J_L1,K_L1,I_R1,J_R1,K_R1,I_L2,J_L2,K_L2,I_R2,J_R2,K_R2,    &
                &            I_VL0,J_VL0,K_VL0,   I_VR0,J_VR0,K_VR0,   I_VR1,J_VR1,K_VR1,I,J,K,  IJK,MinorMax)

                do L=1,18
                    DqDxyz(L,I_l0,J_l0,K_l0)=DqDxyz(L,I_r0,J_r0,K_r0)
                enddo
            enddo
            enddo
            enddo
        endif

END SUBROUTINE BC_far



SUBROUTINE BC_FARBOND(XM,  P2,RR,Vxi,Vyi,Vzi,DNx,DNy,DNz, VxF,VyF,VzF,PP0,RR0,VX0,VY0,VZ0,dir)
    
    IMPLICIT NONE
    
    
    REAL:: XM
    REAL:: P2,RR,Vxi,Vyi,Vzi,DNx,DNy,DNz
    REAL:: PP0,RR0,VX0,VY0,VZ0
    REAL:: VXF,VYF,VZF
    REAL:: dir
    real:: pGam
    
    REAL:: AF,AE,QNE,QNF,RF,RE,QN,AS,SON,QTX,QTY,QTZ

        pGam=1.4
        AF=1./XM
        !AE=SQRT(1.4*P2/RR)
        AE=SQRT(pGam*P2/RR)        !speed of sond
        QNE=VXi*DNX+VYi*DNY+VZi*DNZ
        QNF=VXF*DNX+VYF*DNY+VZF*DNZ
        RF=QNF-5.*AF              ! 远场自由来流的Riemann不变量
        RE=QNE+5.*AE              ! 远场边界网格面内侧的Riemann不变量
        QN=0.5*(RE+RF)
        AS=0.1*(RE-RF)
        IF(QN>-AS.AND.QN<0.)THEN
          !SON=1./1.4/(XM*XM)
          SON=1./pGam/(XM*XM)
          QTX=VXF-QNF*DNX
          QTY=VYF-QNF*DNY
          QTZ=VZF-QNF*DNZ
          VX0=QTX+QN*DNX
          VY0=QTY+QN*DNY
          VZ0=QTZ+QN*DNZ
       !   RR0=(AS*AS/SON/1.4)**2.5
          RR0=(AS*AS/SON/pGam)**2.5
        !  PP0= AS*AS*RR0/1.4
           PP0= AS*AS*RR0/pGam
          
          dir=-1.
        ENDIF

        IF(QN>=0..AND.QN<AS)THEN
         ! SON=P2/RR**1.4
          SON=P2/RR**pGam
          QTX=VXi-QNE*DNX
          QTY=VYi-QNE*DNY
          QTZ=VZi-QNE*DNZ
          VX0=QTX+QN*DNX
          VY0=QTY+QN*DNY
          VZ0=QTZ+QN*DNZ
         ! RR0=(AS*AS/SON/1.4)**2.5
         ! PP0= AS*AS*RR0/1.4
          RR0=(AS*AS/SON/pGam)**2.5
          PP0= AS*AS*RR0/pGam
          
          dir=1.
        ENDIF
! 超音速入口
        IF(QN<=-AS)THEN
            
          VX0=VXF
          VY0=VYF
          VZ0=VZF
          RR0=1.0
         ! PP0=1./1.4/XM/Xm
          PP0=1./pGam/XM/Xm
          
          dir=-1.
        ENDIF
!超音速出口
        IF(QN>=AS)THEN
          VX0=VXi
          VY0=VYi
          VZ0=VZi
          RR0=RR
          PP0=P2
          dir=1.
        ENDIF
        
      
          
        
END SUBROUTINE BC_FARBOND






SUBROUTINE BC_FARBONDP(XM,P2,RR,Vxi,Vyi,Vzi,DNx,DNy,DNz, VxF,VyF,VzF,          PP0,RR0,VX0,VY0,VZ0, TT0, dir)
    !Use Global
    IMPLICIT NONE
    
    REAL:: XM
    REAL:: P2,RR,Vxi,Vyi,Vzi,DNx,DNy,DNz
    REAL:: PP0,RR0,VX0,VY0,VZ0,TT0
    REAL:: VXF,VYF,VZF
    REAL:: dir
    real:: pGam
    
    REAL:: PPF
    REAL:: VNF,V1F,V2F,V3F,P_F,T_F,Ro_F,A_F
    REAL:: VNI,V1I,V2I,V3I,P_I,T_I,Ro_I,A_I
    REAL:: DAU,VV1,VV2,VV3
    REAL:: UUU,PPP,TTT
    
!  Dnx = -Dnx
!  Dny = -Dny
!  Dnz = -Dnz
    pGam=1.4
    PPF=1./1.4/XM/XM
!      PPF=1./pGam/XM/XM
   
	  VNF = VXF*DNx+VYF*DNy+VZF*DNz
	  V1F = VXF - VNF*DNx
	  V2F = VYF - VNF*DNy
	  V3F = VZF - VNF*DNz
	  P_F = PPF
	  T_F = 1.0
	  Ro_F = 1.0
	  A_F = 1.0/Xm

	  VNI = Vxi*DNx+Vyi*DNy+Vzi*DNz
	  V1I = Vxi - VNI*DNx
	  V2I = Vyi - VNI*DNy
	  V3I = Vzi - VNI*DNz
	  P_I = P2
	  !T_I = 1.4*Xm*Xm*P2/RR
      T_I = pGam*Xm*Xm*P2/RR
	  Ro_I = RR
	 ! A_I = SQRT(1.4*P2/RR)
      A_I = SQRT(pGam*P2/RR)

	  DAU = (VNF+VNI)/2.0

        if( dau>0.0 )then
		VV1=V1I
		VV2=V2I
		VV3=V3I

		UUU = VNI
		PPP = P_F
		TTT = T_I

	    dir = 1
        else
		VV1=V1F
		VV2=V2F
		VV3=V3F

		UUU = VNF
		PPP = P_I
		TTT = T_F

	    dir = -1
        endif

	  VX0 = UUU*DNx + VV1
	  VY0 = UUU*DNy + VV2
	  VZ0 = UUU*DNz + VV3
	  PP0 = PPP
	  TT0 = TTT
	  RR0 = PPP/PPF/TTT  !or dRo=dP/AM2, AM2=?
!!!!!!
        
END SUBROUTINE BC_FARBONDP
